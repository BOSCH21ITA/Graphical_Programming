classType MyCCF.tests.TestDriverBRAKE
blockdiagramSpecification Main {
	methodBody calc {
		outPin active {
			connection_32, connection_36, connection_40, connection_43
		}
	}
	simpleIdentifier MyCCF.resources.DriverMessages.brake at (411, 215) {
		label at (0, -1)
		inPin connection_17
		sequenceCall {
			inPin connection_16 {
				bendpoints (170, 0)
			}
		}
	}
	simpleIdentifier MyCCF.resources.CarMessages.brake at (291, 345) {
		label at (0, -1)
		outPin {
			connection_4
		}
		sequenceCall {
			inPin
		}
	}
	equal at (441, 316) {
		inPin connection_18 {
			bendpoints (70, 0), (70, 100)
		}
		inPin connection_4 {
			bendpoints (110, 0)
		}
		outPin {
			connection_5
		}
	}
	and at (581, 286) {
		inPin connection_8
		inPin connection_5 {
			bendpoints (100, 0)
		}
		outPin {
			connection_12
		}
	}
	simpleIdentifier MyCCF.resources.DriverMessages.display at (471, 265) {
		label at (0, -1)
		outPin {
			connection_7
		}
		sequenceCall {
			inPin
		}
	}
	not at (541, 261) {
		inPin connection_7
		outPin {
			connection_8
		}
	}
	simpleIdentifier MyCCF.resources.DriverMessages.on at (511, 405) {
		label at (0, -1)
		inPin connection_31
		sequenceCall {
			inPin connection_30 {
				bendpoints (140, 0), (140, 280), (270, 280)
			}
		}
	}
	simpleIdentifier MyCCF.resources.TestMessages.testBRAKEGood at (691, 285) {
		label at (0, -1)
		inPin connection_12 {
			bendpoints (70, 0)
		}
		sequenceCall {
			inPin connection_11 {
				bendpoints (0, -90)
			}
		}
	}
	complexIdentifier SW at (91, 191) size (6, 4) backgroundColor #ffffff {
		label at (-80, 11)
		methodCall SystemLib.CounterTimer.StopWatch.value {
			returnPin at (right, 1) {
				connection_20, connection_15
			}
			sequenceCall {
				inPin
			}
		}
		methodCall SystemLib.CounterTimer.StopWatch.compute {
			methodVoidPin at (left, 1) sequenceCall at (-10, -64) {
				inPin connection_13 {
					bendpoints (70, 0), (70, 80), (-160, 80)
				}
			}
		}
		methodCall SystemLib.CounterTimer.StopWatch.reset {
			methodVoidPin at (top, 0) sequenceCall at (6, 60) {
				inPin connection_42 {
					bendpoints (-240, 0)
				}
			}
		}
	}
	simpleIdentifier brake_curve at (221, 201) {
		label at (0, 1)
		inPin connection_15 {
			bendpoints (60, 0)
		}
		outPin {
			connection_18, connection_17
		}
		sequenceCall {
			inPin
		}
	}
	simpleIdentifier on_curve at (221, 371) {
		label at (0, 1)
		inPin connection_20 {
			bendpoints (30, 0), (30, 180)
		}
		outPin {
			connection_28
		}
		sequenceCall {
			inPin
		}
	}
	equal at (421, 396) {
		inPin connection_28 {
			bendpoints (140, 0)
		}
		inPin connection_29 {
			bendpoints (10, 0)
		}
		outPin {
			connection_37, connection_31
		}
	}
	literal Numeric "1.0" at (361, 423) size (49, 0) {
		label at (0, 4)
		outPin {
			connection_29
		}
	}
	if at (181, 91) {
		inPin connection_35 {
			bendpoints (80, 0)
		}
		ifControlFlowOutPin {
			connection_13, connection_16, connection_30
		}
		sequenceCall {
			inPin connection_32
		}
	}
	simpleIdentifier start at (61, 75) {
		label at (0, -1)
		outPin {
			connection_41, connection_35
		}
		sequenceCall {
			inPin
		}
	}
	if at (611, 351) {
		inPin connection_37 {
			bendpoints (0, -50)
		}
		ifControlFlowOutPin {
			connection_11
		}
		sequenceCall {
			inPin connection_36
		}
	}
	complexIdentifier EdgeFalling_instance at (341, 21) size (3, 3) backgroundColor #ffffff {
		label at (0, 1)
		methodCall SystemLib.Miscellaneous.EdgeFalling.compute {
			argumentPin signal at (left, 1) connection_41 {
				bendpoints (50, 0), (50, -40)
			}
			sequenceCall at (-70, -30) {
				inPin connection_40
			}
		}
		methodCall SystemLib.Miscellaneous.EdgeFalling.value {
			returnPin at (right, 1) {
				connection_44
			}
			sequenceCall {
				inPin
			}
		}
	}
	if at (291, 61) {
		inPin connection_44 {
			bendpoints (70, 0), (70, 30)
		}
		ifControlFlowOutPin {
			connection_42, connection_45
		}
		sequenceCall {
			inPin connection_43
		}
	}
	simpleIdentifier MyCCF.resources.TestMessages.testBRAKEGood at (631, 185) {
		label at (0, -1)
		inPin connection_46
		sequenceCall {
			inPin connection_45 {
				bendpoints (-80, 0), (-80, 100)
			}
		}
	}
	literal Boolean "false" at (541, 183) size (49, 0) {
		label at (0, 4)
		outPin {
			connection_46
		}
	}
}